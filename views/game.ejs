<html>
<head>

  <title></title>

  <!-- meta tags -->
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">


  <!-- CSS links -->
  <link href="../public/css/main.css" rel="stylesheet" type="text/css" />
  <link rel="shortcut icon" type="image/x-icon" href="public/media/DiveIcon.png" />


  

</head>


<body>
<canvas id="canvas" width="643" height="714"></canvas>

<header>
  <nav class="g-nav">
      <form action="/" method="GET">
        <button type="submit" class="btn-home">Game</button>
      </form>

      <form action="/collection/home" method="GET">
        <button type="submit" class="btn-collection">Collection</button>
      </form>
      <%if (logged) { %>
      <form action="/logout" method="GET">
        <button type="submit" class="btn-logout">Log Out</button>
      </form>
      <% } else{ %>  
      <form action="/login" method="POST">
        <button type="submit" class="btn-login">Log in</button>
      </form>
      <form action="/register">
        <button type="submit" class="btn-register">Register</button>
      </form>
      <% } %>         
  </nav>
</header>
<h1 id="countdown"></h1>
<div class="content tokiWodTomare willHide">
  

  <h2 id="timer" style="display:none;"></h2>

    <div class="rightList list">
      <h2>Right Guess</h2>
      <div>
        <ul id="rightWords">

      </ul>
      </div>
    </div>

    <div class="main-ui">
      <center id="fadein" class>
        <div class="acc-mark hud">%</div><div class="acc hud">0</div>
        <div class="rank hud">0</div>

        <h1 class="kanji"></h1>

        <form action="" class="our-form" method="">
          <input type="text" class="our-field" name="guess" oninput="hitSound()">
          <button id="submit-btn" type="submit">Guess</button>
        </form>
        <p id="note"><span>NOTE: </span>To switch quickly to hiragana, select the field above and press <span>ALT + SHIFT</span> then <span>CRTL + CAPS-LOCK</span></p>
      </center>
    </div>

    <div class="wrongList list">
      <h2>Wrong Guess</h2>
      <div>
        <ul id="wrongWords"></ul>

      </div>
    </div>
  
  <div class="wrong hud">0</div>
  <div class="combo hud">0</div>

</div>

<button class="reset tokiWodTomare willHide">GIVE UP</button> 

<div id="scoreMenuX" style="display:none;">

  <div id="finalRank">D</div>

  <div id="resultScreen">

    <div id="scoreRes">

      <h2>Miss </h2><h1 id="finalMiss">0</h1><br>
      <h2>Correct </h2><h1 id="finalRight">0</h1><br>

      <h2>Highest combo </h2><h1 id="highCombo">0</h1><br>
      <h2>Accuracy </h2><h1 id="finalAcc">0</h1>

      
    </div>

    <h1 id="seeBelow">↓      Check wrong answers      ↓</h1>
    

  </div>

  <table id="tableau">
    <thead>
      <tr>
        <th><h2>Word</h2></th>
        <th><h2>Reading</h2></th>
        <th><h2>Misscount</h2></th>
        <th><h2>Jisho</h2></th>
      </tr>
    </thead>
    <tbody>
      <tr>
      </tr>
    </tbody>
  </table>

  <button class="restartButton" onclick="showContent()">Retry</button>
</div>

<style>
  #note {
    text-align: center;
    transition: 1s;
    margin: 1em 0;
    font-size: 1.1rem;
  }
  #note span {
    color: #FF0;
  }

  #wrongWords{
    margin-top: 20vh;
    font-size: 2.5rem;

    padding: 10px 20px;
    font-family: 'yasashisa';
  }

  #rightWords{
    margin-top: 2vh;
    font-size: 2rem;
    font-family: 'yasashisa';
    overflow: scroll
  }

  .list h2 {
    font-family: "yasashisa";
  }

  #rightWords ul {
    box-sizing: border-box;
  }

  li {
    list-style: none;
  }

  #rightWords li {
    padding: 10px 20px;
  }

  #rightWords li:nth-child(even) {
    background: #f8f8f841;
  } 

  #rightWords li:last-child {
    border-bottom: none;
  }

  #wrongWords li:nth-child(1){
    color:red;
  }

</style>
<!-- JavaScript -->
<script src="public/js/jquery.js"></script>
<script>


 // First mess
 const ourForm = document.querySelector(".our-form")
 const ourField = document.querySelector(".our-field")
 const wrong = document.querySelector(".wrong")
 const combo = document.querySelector(".combo")
 const kanji = document.querySelector('.kanji')
 const content = document.querySelector('.content')
 const scoreMenuX = document.querySelector('#scoreMenuX')
 const tableRef = document.querySelector("#tableau")
 const scoreX = document.querySelector("#scoreRes")
 const main_ui = document.querySelector(".main-ui")
 const acc = document.querySelector('.acc')
 const rank = document.querySelector('.rank')
 const finalMiss = document.querySelector('#finalMiss')
 const finalRight = document.querySelector('#finalRight')
 const finalAcc = document.querySelector('#finalAcc')
 const finalCombo = document.querySelector('#highCombo')
 const finalRank = document.querySelector('#finalRank')
 const rightWords = document.querySelector('#rightWords')
 const wrongWords = document.querySelector('#wrongWords')
 const willHide = document.querySelector('.willHide')



 const diff = 1 // Game Difficulty WIP

 let initialized = false

 const data = '<%- JSON.stringify(db) %>'
 const data2 = JSON.parse(data)

 // -- Audio file buffering -- //

 let threeHundredSFX = new Audio("../public/sfx/300.wav")
 let hitSFX = new Audio("../public/sfx/hit.wav")
 let missSFX = new Audio("../public/sfx/miss.wav")

 // -- Game state -- //

 let state = {
   wrongAnswers: 0,
   combo: 0,
   rightAnswers:0,
   i:0,
   highCombo:0,
   rank:'',
   kanj: null,
   hira: null,
   id: 0
 }




  // -- Array loop -- //

  let tabRes = []  // Array of results [0] = kanji -  [1] = hira  - [2] = misscount
  let arrAnki = [] // Anki array [0] = kanji -  [1] = hira  - [2] = i value

  // -- Initialisation -- //

 
    console.log('<%=startId%>')



 function initProblem(data){
   let i = randomIntFromInterval('<%=startId%>','<%=numOfResults%>') 

   console.log(i)

   state.kanj = data[i].kanj
   state.hira = data[i].hira
   state.id = data[i].word_id

   

   kanji.style.fontFamily = "yasashisa"
   kanji.innerHTML = state.kanj
   ourField.value = ""
   ourField.focus()

   initialized = true
 }

 function shiritori(data){
  stateArr = []
  stateAnkiArr = []
 
  stateKana = state.hira.slice(-1) /* The last kana of the current word */
  let nWord = false /* if the last kana is a ん */

  /* rule exceptions */

  if (stateKana === 'ん') {
    nWord = true
    stateKana = state.hira.slice(-2,-1)
  }

  if (stateKana === 'ゃ') {          /* KANA THAT  DONT EXISTS YETON N5 ぱ */
    stateKana = 'や'
  }

  if (stateKana === 'ゅ') {
    stateKana = 'ゆ'
  }

  if (stateKana === 'ょ') {
    stateKana = 'よ'
  }

    /*      */

  console.log("state kana",stateKana)

  data.forEach((kana) => {
      if (kana.hira.charAt(0) === stateKana)
        stateArr.push(kana)
  })

  if (arrAnki.length > 0){
    arrAnki.forEach(item => {
      if (item.hira.charAt(0) === stateKana){
        stateAnkiArr.push(item)
      }
    })
  }

  console.log("state Anki", stateAnkiArr)
  console.log("state arr", stateArr)
  console.log("state arrAnki", arrAnki)


  if (stateAnkiArr.length > 0) {
    let i = randomIntFromInterval(0,stateAnkiArr.length) 

    state.kanj = stateAnkiArr[i]["kanj"]
    state.hira = stateAnkiArr[i]["hira"]
    state.id = stateAnkiArr[i]["id"]

    kanji.style.fontFamily = "zero"

  } else {
    let i = randomIntFromInterval(0,stateArr.length) 
  
    state.kanj = stateArr[i].kanj
    state.hira = stateArr[i].hira
    state.id = stateArr[i].word_id


    kanji.style.fontFamily = "yasashisa"
  
  }

  kanji.innerHTML = state.kanj
  ourField.placeholder = stateKana
  ourField.value = ""
  ourField.focus()

 }


 function updateProblem(){ 
  if (!initialized){
    initProblem(data2) 
  } else {
    shiritori(data2)
  }
  console.log(state.hira) // Coz Im dumb
 }



  // -- Anki -- //

function inAnki() {

  let l = arrAnki.length

  if (l < 1) return false

  for (let i = 0; i < l; i++) {
    if (arrAnki[i]["kanj"] === state.kanj) {
      return true
    }
  }
  return false
}
 

 function addAnki(){
   if (!inAnki()){
    arrAnki.push({
      kanj: state.kanj, 
      hira: state.hira,
      id: state.id
    })
   }
 }


  // --         -- //


 function randomIntFromInterval(min, max) { 
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min) + min);
 }



 function arrRes(){

  if (tabRes.some(e => e.kanj === state.kanj)) {

    const foundkanj = tabRes.find(k => {
    return k.kanj === state.kanj
    })
    foundkanj.miss++
  }

  else{
    tabRes.push({
      kanj: state.kanj, 
      hira: state.hira,
      miss: 1
    })
  }
 }

 function arrToTab(){
  tabRes.forEach((item) => {
    addRow(item.kanj,item.hira,item.miss)
  });

 }



 // -- Handling input -- //

 ourForm.addEventListener("submit", handleSubmit) 

 function handleSubmit(e){
   e.preventDefault()
   $("#jin-pop").addClass("hidden")
   state.i++


     // RIGHT ANSWER --                                                              
   if (ourField.value === state.hira){

    rightAnsAnim2()
    setTimeout("rightAns()", 600)
    
     // WRONG ANSWER --                                                             
   } else{
     wrongAnsAnim2()
     wrongAns()
   }
 }

 function rightAns(){

  $.post('/send', { id: state.id });
  
  state.combo++
  state.rightAnswers++
  rankCalc()
  rightWords.innerHTML += "<li>"+ state.kanj + "</li>"
  acc.textContent = accCalc()
  rank.textContent = state.rank
  combo.textContent = state.combo
  arrAnki = arrAnki.filter(function( obj ) {
    return obj.kanj !== state.kanj
  })  
  console.log("updating problem..")
  updateProblem()

 }

 function wrongAns(){
  state.wrongAnswers++
  if(state.combo > state.highCombo){
    state.highCombo = state.combo
  }
  state.combo = 0
  rankCalc()
  ankiToHTML()
  acc.textContent = accCalc()
  rank.textContent = state.rank
  wrong.textContent = state.wrongAnswers
  combo.textContent = state.combo
  



  arrRes()

  addAnki()

  console.log("updating problem..")
  updateProblem()

 }




 // -- Reset -- //


 function resetGame(){
   state.combo = 0
   state.wrongAnswers = 0
   state.rightAnswers = 0
   state.i = 0
   state.highCombo = 0
   state.id = 0
   tabRes = [] 
   arrAnki = [] 
   
 }

 // -- Tableau -- //

 function showContent(){
   resetGame()
   updateProblem() 
   willHide.style.display = 'flex'
   scoreMenuX.style.display = 'none'
   clearTab()
   }

 function scoreMenu(){
   willHide.style.display = 'none'
   scoreMenuX.style.display = 'block'


   finalAcc.textContent = accCalc() + '%'
   finalCombo.textContent = state.highCombo
   finalMiss.textContent = state.wrongAnswers
   finalRight.textContent = state.rightAnswers
   finalRank.textContent = state.rank
 }

 function addRow(kanj,hira,miss) {

   let newRow = tableRef.insertRow(-1)
   let newCell1 = newRow.insertCell(0)
   let newCell2 = newRow.insertCell(1)
   let newCell3 = newRow.insertCell(2)
   let newCell4 = newRow.insertCell(3)
   let newText1 = document.createTextNode(kanj)
   let newText2 = document.createTextNode(hira)
   let newText3 = document.createTextNode(miss)
   let newText4 = document.createTextNode("Click for infos")

   newCell4.addEventListener("click",() => {window.open("https://jisho.org/word/"+kanj, "_blank");})

   newCell1.appendChild(newText1)
   newCell2.appendChild(newText2)
   newCell3.appendChild(newText3)
   newCell4.appendChild(newText4)

 }

 function clearTab(){

   while (tableRef.rows.length > 1) {
     tableRef.deleteRow(1)
   }
 }



// -- Answers Animations -- //

 var existingTimeout = null;

 function wrongAnsAnim2() {
  missSFX.currentTime = 0
  missSFX.volume = 0.1
  missSFX.play();
  $("#jin-pop").html(state.kanj + '&nbsp' + '&nbsp' + '&nbsp' + '&nbsp' +  '&nbsp' + '&nbsp' + '&nbsp' + '&nbsp' + '&nbsp' + '&nbsp' + '&nbsp' + '&nbsp' + '    =>    ' + '&nbsp' + '&nbsp' + '&nbsp' + '&nbsp'+ '&nbsp' + '&nbsp' + '&nbsp' + '&nbsp'+ '&nbsp' + '&nbsp' + '&nbsp' + '&nbsp'  + state.hira);
	$("#jin-pop").removeClass("hidden");

  $(".main-ui").addClass("shake-no");

  if (existingTimeout !== null) {
    clearTimeout(existingTimeout);
  }

  existingTimeout = setTimeout(function() {
    $(".main-ui").removeClass("shake-no");
  }, 300);
}

function rightAnsAnim2() {

  threeHundredSFX.currentTime = 0
  threeHundredSFX.volume = 0.1
  threeHundredSFX.play();

  $(".main-ui").addClass("yes");

  if (existingTimeout !== null) {
    clearTimeout(existingTimeout);
  }

  existingTimeout = setTimeout(function() {
    $(".main-ui").removeClass("yes");
    $(".main-ui").addClass("pulsing");
    setTimeout(function () {
      $(".main-ui").removeClass("pulsing");
    }, 500);
  }, 300);

}

// -- Audio -- //

function hitSound(){
  hitSFX.currentTime =  0
  hitSFX.volume = 0.05
  hitSFX.play()
}

function countdownSFXPlay(){
  countdownSFX.currentTime =  0
  countdownSFX.volume = 0.1
  countdownSFX.play()
}

// -- PopUp Right Answer -- //


$(document).ready(function() {
	$(".wrongList").append('<div id="dialogs"></div>');
	$(".wrongList").append('<div id="jin-pop" class="hidden">Test pop</div>');
});


// -- Timer -- //

var initial = 300000
var count = initial
var countdownT = initial / 100
var counter // 10 will  run it every 100th of a second
var initialMillis
var timerEL = document.getElementById("timer")
var countdown = document.getElementById("countdown")
const freezeTime = true

function countdownTimer(){
    if (countdownT <= 1000 && countdownT > 0) {
        countdown.innerHTML = "始め"
        var current = Date.now()
        countdownT = countdownT - (current - initialMillis)
        initialMillis = current
        return
    } else if (countdownT <= 0) {
        updateProblem()
        countdown.style.display = "none"
        $(".content").removeClass("tokiWoTomare")
        clearInterval(counter)
        timerEL.style.display = "block"
        initialMillis = Date.now()
        counter = setInterval(timer, 1)
        return
    } else {
    var current = Date.now()

    countdownT = countdownT - (current - initialMillis)
    initialMillis = current
    
    displayCountdown(countdownT)
    }
    
}


function timer() {
  if (freezeTime){
    return
  } else if (count <= 1000 * 60 && count > 0) {  //  end of game
        timerEL.style.color = 'red'
        var current = Date.now()
    
        count = count - (current - initialMillis)
        initialMillis = current
        displayCount(count)
        return
    } else if (count <= 0) {
      clearInterval(counter)
      arrToTab()
      scoreMenu()
      timerEL.style.display = "none"
      return
    } else {

    var current = Date.now()
    
    count = count - (current - initialMillis)
    initialMillis = current
    displayCount(count)
    }
}

function displayCount(count) {
  let res = Math.floor(count / 1000)
  let milliseconds = count.toString().substring(3,5)
  let seconds = res % 60
  let minutes = (res - seconds) / 60

  timerEL.innerHTML =
      minutes + ':' + seconds  + "<span id='ms'>" +  milliseconds + "</span>"
}

function displayCountdown(count) {
    let res = Math.floor(count / 1000)
    let milliseconds = count.toString().substring(3,5)
    let seconds = res % 60
    let minutes = (res - seconds) / 60
  
    countdown.innerHTML = seconds
  }

function ankiToHTML() {
 
  html$ = ''
  for(var key in arrAnki){
    html$ += '<li>'+arrAnki[key].kanj+'</li>'            
  }
  wrongWords.innerHTML = html$  
}

$('.reset').on('click', function () {
  
    clearInterval(counter);
    arrToTab()
    scoreMenu()
    timerEL.style.display = "none";
    count = initial;
    displayCount(count);
});

$('.restartButton').on('click', function () {
  clearInterval(counter);
  count = initial;
  displayCount(count);
  initialMillis = Date.now();
  counter = setInterval(timer, 1);
  timerEL.style.display = "block";
});

/*displayCountdown(countdownT)*/
initialMillis = Date.now();
counter = setInterval(countdownTimer, 1);
displayCount(initial)




function accCalc(){
  return (((state.i-state.wrongAnswers)/state.i)*100).toPrecision(3)
}

function rankCalc(){

  /* Oofie warning */

  if(state.i >= 50 && state.wrongAnswers == 0){
    state.rank = 'SSS'
    rank.style.color = '#FFD700'
  }
  else if(state.i >= 20 && state.wrongAnswers === 0){
    state.rank = 'SS'
    rank.style.color = '#C0C0C0'
  }
  else if(state.i >= 50 && state.wrongAnswers > 0 && state.wrongAnswers <= 5){
    state.rank = 'A'
    rank.style.color = 'green'
  }
  else if(state.i >= 50 && state.wrongAnswers > 5 && state.wrongAnswers <= 20){
    state.rank = 'B'
    rank.style.color = 'blue'
  }
  else if(state.i >= 50 && state.wrongAnswers > 20 && state.wrongAnswers <= 50){
    state.rank = 'C'
    rank.style.color = 'purple'
  }
  else if(state.i >= 20 && state.wrongAnswers === 0){
    state.rank = 'S'
    rank.style.color = 'yellow'
  }
  else if(state.i >= 20 && state.wrongAnswers > 0 && state.wrongAnswers <= 2){
    state.rank = 'A'
    rank.style.color = 'green'
  }
  else if(state.i >= 20 && state.wrongAnswers > 2 && state.wrongAnswers <= 10){
    state.rank = 'B'
    rank.style.color = 'blue'
  }
  else if(state.i >= 20 && state.wrongAnswers > 10 && state.wrongAnswers <= 20){
    state.rank = 'C'
    rank.style.color = 'purple'
  }
  else if(state.i < 20 && state.wrongAnswers === 0){
    state.rank = 'S'
    rank.style.color = 'yellow'
  }
  else if(state.i < 20 && state.wrongAnswers > 0 && state.wrongAnswers <= 1){
    state.rank = 'A'
    rank.style.color = 'green'
  }
  else if(state.i < 20 && state.wrongAnswers > 1 && state.wrongAnswers <= 5){
    state.rank = 'B'
    rank.style.color = 'blue'
  }
  else if(state.i < 20 && state.wrongAnswers > 5 && state.wrongAnswers <= 15){
    state.rank = 'C'
    rank.style.color = 'purple'
  }
  else{
    state.rank = 'D'
    rank.style.color = 'red'
  }
}



</script>
<!-- <script src="public/js/index.js"></script> -->
<script src="public/js/space.js"></script>
<script src="public/js/gl-matrix.js"></script>
<script src="public/js/write.js"></script>
</body>
</html>